#+begin_src emacs-lisp
  (defconst semester "972528")
  (defconst class "1")
  (defconst assess-file "pa")
  (defconst assign-file "wa")
  (defconst assign-name "Assign")
  (defconst assess-name "Assess")

  (defun week-folder-string (name week)
    "Put together the string for a student or group's selected week folder"
    (concat (class-folder-string) "/" name "/week" week))

  (defun class-folder-string ()
    "Put together the string for the class."
    (concat "~/" semester "/" class))

  (defun score-file-string (file-type group week)
    (concat (week-folder-string group week) "/" file-type week ".org"))

  (defun get-group-grades (group week)
    (list (get-score assess-file group week)
          (get-score assign-file group week)))

  (defun get-score (type group week)
    (let ((score-file (score-file-string type group week)))
      (if (file-exists-p score-file)
          (extract-score-from-tag
           (get-score-line 
            (with-temp-buffer 
              (insert-file-contents score-file)
              (split-string (buffer-string) "\n" t))))
        "0")))

  (defun get-score-line (group-file-lines)
    (catch 'found-line
      (mapc (lambda (line)
              (when (string-match "#\\+SCORE:" line)
                (throw 'found-line line))) group-file-lines)))

  (defun split-up-score-tag (score-tag)
    (split-string score-tag ":" t "\\s-+"))

  (defun extract-score-from-tag (score-tag)
    (nth 1 (split-up-score-tag score-tag)))

  (defun get-assign-score (scores)
    (cadr scores))

  (defun get-assess-score (scores)
    (car scores))

  (defun get-groups-file ()
    "Grabs the info file to be able to access the groups list for
         the class. This is returned as a list of lines without empty
         spaces."
    (with-temp-buffer
      (insert-file-contents (concat "~/mebewiyo/W17/" class "dm/info.org"))
      (split-string (buffer-string) "\n" t)))

                                          ;    (format ">%s<" (get-assign-score (get-group-grades "a" "06")))

  (defun get-group-membership ()
    (let ((line-num 0)
          (groups-file (get-groups-file)))
      (catch 'found-members
        (mapc (lambda (line)
                (if (not (string-match "(mapcar (lambda (x)" line))
                    (incf line-num)
                  (incf line-num 3)
                  (throw 'found-members t)))
              groups-file))
      (split-up-group-members (nth line-num groups-file))))

  (defun split-up-group-members (groups-and-members)
    (mapcar (lambda (group) (split-string group " " t))
            (split-string groups-and-members ")" t "[\\(]*\\s-*[\\(]*")))

  (defun pull-grades (week)
    (let ((groups-with-members (get-group-membership)))
      (mapc (lambda (group)
              (let* ((group-name (car group))
                     (members (rest group))
                     (scores (get-group-grades group-name week)))
                (mapc (lambda (member)
                        (message (format "\n%s\nAssess %s\nAssign %s\nPart of Group %s"
                                         member (get-assess-score scores)
                                         (get-assign-score scores) group-name)))
                      members)))
            groups-with-members)))

  (pull-grades "06")
  (defun change-scores (student scores)
    )
#+end_src

#+RESULTS:
